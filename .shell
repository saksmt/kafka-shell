#!/usr/bin/env bash

export PS1="kfk> "
export ZK="zk:2181"

context=
contextAliasFunc=

function __ctx_func() {
    contextName=$1
    shift
    _contextAliasFunc=$1
    shift
    if [[ "$context" != "$contextName" ]]; then
        if [[ "$context" != "" ]]; then
            $contextAliasFunc unalias
        fi
        
        # saving previous context
        lastContext=$context
        lastContextAliasFunc=$contextAliasFunc

        # applying new context
        contextAliasFunc=$_contextAliasFunc
        context=$contextName

        export PS1="kfk ($context)> "
        $contextAliasFunc
        
        if [[ "$#" != "0" ]]; then
            eval "$@"

            # rolling back aliases
            $contextAliasFunc unalias
            
            # restoring context
            context=$lastContext
            contextAliasFunc=$lastContextAliasFunc

            # normalizing PS1
            if [[ "$context" == "" ]]; then
                export PS1="kfk> "
            else
                export PS1="kfk ($context)> "
            fi

            # re-applying old aliases
            $contextAliasFunc
        fi
    fi
}

function __topics() {
    kTopics="/opt/kafka/bin/kafka-topics.sh --zookeeper zk:2181"
    if [[ "$1" == "" ]]; then
        alias list="$kTopics --list"
        alias describe="$kTopics --describe --topic "
        alias create="$kTopics --create --topic "
        alias create-simple="$kTopics --create --if-not-exists --partitions 1 --replication-factor 1 --topic "
    else
        unalias list
        unalias describe
        unalias create
        unalias create-simple
    fi
}

function __consume() {
    kConsume="/opt/kafka/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092"
    if [[ "$1" == "" ]]; then
        alias all-from="$kConsume --from-beginning --topic "
        alias latest-from="$kConsumer --topic "
    else
        unalias all-from
        unalias latest-from
    fi
}

function __publish() {
    kPublishScript="/opt/kafka/bin/kafka-console-producer.sh"
    kPublish="${kPublishScript} --broker-list localhost:9092"
    if [[ "$1" == "" ]]; then
        alias raw="$kPublish --topic "
        alias with-key='kPublish="'"${kPublishScript}"'" __publishWithKey'
    else
        unalias raw
        unalias with-key
    fi
}

function __publishWithKey() {
    key=$1
    topic=$2
    message=$(mktemp)
    boundary="::$(cat /dev/urandom | base64 | grep -v '=' | grep -v '+' | grep -v '/' | head -c20)::"

    # generating message in right format
    echo -n ${key} > ${message}
    echo -n ${boundary} >> ${message}
    cat >> ${message}
    
    cat ${message} | $kPublish --property "parse.key=true" --property "key.separator=${boundary}" --topic ${topic} --broker-list localhost:9092

    rm -f ${message}
}

alias topics="__ctx_func topics __topics"
alias consume="__ctx_func consume __consume"
alias publish="__ctx_func publish __publish"

alias help="alias | tr '=' ' ' | awk '{ print \$2; }'"

# vim: sw=4 ts=4 et
