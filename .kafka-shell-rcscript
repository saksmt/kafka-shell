#!/usr/bin/env bash

if [[ -e "/usr/local/etc/kafka-shell/config" ]]; then
    source /usr/local/etc/kafka-shell/config
fi

kafkaBin="/opt/kafka/bin"
if [[ "${KAFKA_BINDIR}" != "" ]]; then
    kafkaBin=${KAFKA_BINDIR}
fi

if [[ "${SERVER}" != "" ]] && [[ -e "/usr/local/etc/kafka-shell/servers/${SERVER}" ]]; then
    source /usr/local/etc/kafka-shell/servers/${SERVER}
fi

if [[ "${ZK}" == "" ]]; then
    export ZK="zk:2181"
fi

if [[ "${BOOTSTRAP_SERVER}" == "" ]]; then
    export BOOTSTRAP_SERVER="localhost:9091"
fi

if [[ "${BROKER}" == "" ]]; then
    export BROKER="${BOOTSTRAP_SERVER}"
fi

context=
contextAliasFunc=

function __setupPS1() {
    serverName=
    if [[ "${SERVER}" != "" ]]; then
        serverName=":${SERVER}"
    fi

    contextName=
    if [[ "$context" != "" ]]; then
        contextName=" (${context})"
    fi

    export PS1="kafka${serverName}${contextName}> "
}

__setupPS1

function __ctx_func() {
    contextName=$1
    shift
    _contextAliasFunc=$1
    shift
    if [[ "$context" != "$contextName" ]]; then
        if [[ "$context" != "" ]]; then
            $contextAliasFunc unalias
        fi
        
        # saving previous context
        lastContext=$context
        lastContextAliasFunc=$contextAliasFunc

        # applying new context
        contextAliasFunc=$_contextAliasFunc
        context=$contextName

        __setupPS1
        $contextAliasFunc
        
        if [[ "$#" != "0" ]]; then
            eval "$@"

            # rolling back aliases
            $contextAliasFunc unalias
            
            # restoring context
            context=$lastContext
            contextAliasFunc=$lastContextAliasFunc

            __setupPS1

            # re-applying old aliases
            $contextAliasFunc
        fi
    fi
}

function __topics() {
    kTopics="${kafkaBin}/kafka-topics.sh --zookeeper ${ZK}"
    if [[ "$1" == "" ]]; then
        alias list="$kTopics --list"
        alias describe="$kTopics --describe --topic "
        alias create="$kTopics --create --topic "
        alias create-simple="$kTopics --create --if-not-exists --partitions 1 --replication-factor 1 --topic "
    else
        unalias list
        unalias describe
        unalias create
        unalias create-simple
    fi
}

function __consume() {
    kConsume="${kafkaBin}/kafka-console-consumer.sh --bootstrap-server ${BOOTSTRAP_SERVER}"
    if [[ "$1" == "" ]]; then
        alias all-from="$kConsume --from-beginning --topic "
        alias latest-from="$kConsumer --topic "
    else
        unalias all-from
        unalias latest-from
    fi
}

function __publish() {
    kPublishScript="$kafkaBin/kafka-console-producer.sh"
    kPublish="${kPublishScript} --broker-list ${BROKER}"
    if [[ "$1" == "" ]]; then
        alias raw="$kPublish --topic "
        alias with-key='kPublish="'"${kPublishScript}"'" __publishWithKey'
    else
        unalias raw
        unalias with-key
    fi
}

function __publishWithKey() {
    key=$1
    topic=$2
    message=$(mktemp)
    boundary="::$(cat /dev/urandom | base64 | grep -v '=' | grep -v '+' | grep -v '/' | head -c20)::"

    # generating message in right format
    echo -n ${key} > ${message}
    echo -n ${boundary} >> ${message}
    cat >> ${message}
    
    cat ${message} | $kPublish --property "parse.key=true" --property "key.separator=${boundary}" --topic ${topic} --broker-list ${BROKER}

    rm -f ${message}
}

alias topics="__ctx_func topics __topics"
alias consume="__ctx_func consume __consume"
alias publish="__ctx_func publish __publish"

alias help="alias | tr '=' ' ' | awk '{ print \$2; }'"

# vim: sw=4 ts=4 et
